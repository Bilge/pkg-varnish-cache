#!/bin/bash
#
# Build Debian and Ubuntu packages from a tarball.
#
# This is the script that our Jenkins/CI system runs. Yes, it is a bit messy.
#
#
# For running this on your own computer (jessie), see https://wiki.debian.org/mk-sbuild
# for information on setting up sbuild.
# Short version: 1) apt-get install ubuntu-dev-tools 2) mk-sbuild jessie
#
# To CHANGE the golden image: sudo schroot -c source:jessie-amd64 -u root
# To ENTER an image snapshot: schroot -c jessie-amd64
# To BUILD within a snapshot: sbuild -A -d jessie-amd64 PACKAGE*.dsc

set -o errexit

BINDISTS=${BINDISTS:-jessie}

rm -rf build
mkdir -p build

SOURCE=$(ls -1 sources/varnish-*.tar.gz)  # XXX
tar xf ${SOURCE} -C build

cd build/varnish-*

# Get a packaging file set suitable for this release.
if [ -z "$UPSTREAMVERSION" ]; then
	V=$(grep PACKAGE_VERSION= configure | sed "s/.*=//;s/'//g")
else
	V="$UPSTREAMVERSION"
fi

if [ "$V" = "trunk" ]; then
	V="4.1"
	MINOR="0"
else
	MINOR="${V##*.}"
	V="${V%.*}"
fi

GIT_DIR=../../debian/.git git archive --prefix=debian/ HEAD | tar xf -

rm -f debian/libvarnish*.symbols
rm -f debian/*.manpages
# enforce 1.0 native
rm -f debian/source/format

ln ../../$SOURCE ../varnish_$V.$MINOR.orig.tar.gz

# Take version override set on jenkins builds into account.
if [ -n "$DEBVERSION" ]; then
  FULL_VERSION="$V.$MINOR-$DEBVERSION"
  dch --distribution {deb_varnish_dist} -v "$FULL_VERSION" "Release build #$BUILD_NUMBER ID: $BUILD_ID"
else
  FULL_VERSION="$V.$MINOR-0+daily+$(date +%Y%m%d.%H%M%S)"
  dch -v "$V.$MINOR-0+daily+$(date +%Y%m%d.%H%M%S)" "Automatic build from git"
fi

dpkg-buildpackage -us -uc -S -j10
cd ..

# By now we are done setting up and building the source package.

# Build binary packages for the requested releases inside chroots.
for dist in $BINDISTS; do
  export DEBIAN_OVERRIDE_BINARY_VERSION="$FULL_VERSION~$dist"
  sbuild -v -c "$dist-amd64" -d "$dist" varnish_*.dsc
done
