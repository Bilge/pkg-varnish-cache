#!/bin/bash
#
# Build Debian and Ubuntu packages from a tarball.
#
# This is the script that our Jenkins/CI system runs. Yes, it is a bit messy.
#
#
# For running this on your own computer (jessie), see https://wiki.debian.org/mk-sbuild
# for information on setting up sbuild.
# Short version: 1) apt-get install ubuntu-dev-tools 2) mk-sbuild jessie
#
# To CHANGE the golden image: sudo schroot -c source:jessie-amd64 -u root
# To ENTER an image snapshot: schroot -c jessie-amd64
# To BUILD within a snapshot: sbuild -A -d jessie-amd64 PACKAGE*.dsc

if [ -n "$JENKINS_HOME" ]; then
	set -x
fi

set -o errexit

BINDISTS=${BINDISTS:-jessie}

rm -rf build
mkdir -p build

SOURCE=$(ls -1 sources/varnish-*.tar.gz)  # XXX
tar xf ${SOURCE} -C build

cd build/varnish-*

V=$(grep PACKAGE_VERSION= configure | sed "s/.*=//;s/'//g")
if [ "$V" = "trunk" ]; then
	V="5.0"
	MINOR="0"
else
	MINOR="${V##*.}"
	V="${V%.*}"
fi

cp -r ../../debian .
rm -f debian/*.sw?    # Delete any vim temporary files.
ln ../../$SOURCE ../varnish_$V.$MINOR.orig.tar.gz

# Take version override set on Jenkins builds into account.
if [ -n "$DEBVERSION" ]; then
	FULL_VERSION="$V.$MINOR-$DEBVERSION"
	dch -v "$FULL_VERSION" "Release build #$BUILD_NUMBER ID: $BUILD_ID"
else
	FULL_VERSION="$V.$MINOR-0+daily+$(date +%Y%m%d.%H%M%S)"
	dch -v "$V.$MINOR-0+daily+$(date +%Y%m%d.%H%M%S)" "Automatic build from git"
fi

dpkg-buildpackage -us -uc -S -j10
cd ..

# By now we are done setting up and building the source package.

# Handle old chroot naming on our jenkins servers.
chroot_postfix="amd64"
test -n "$JENKINS_HOME" && chroot_postfix="amd64-sbuild";

# Build binary packages for the requested releases inside chroots.
for dist in $BINDISTS; do
	export DEBIAN_OVERRIDE_BINARY_VERSION="$FULL_VERSION~$dist"
	sbuild -v -A -c "$dist-$chroot_postfix" -d "$dist" varnish_*.dsc
done
